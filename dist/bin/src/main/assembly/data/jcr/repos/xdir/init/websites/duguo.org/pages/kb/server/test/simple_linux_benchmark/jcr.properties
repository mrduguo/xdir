010_commands=<div><ul>\r\n\
<li>\r\n\
CPU\r\n\
<pre class="code">\r\n\
time echo "scale=5000; a(1)*4" | bc -l > /dev/null\r\n\
</pre>\r\n\
</li>\r\n\
<li>\r\n\
Disk\r\n\
<pre class="code">\r\n\
time dd bs=1M count=5000 if=/dev/zero of=/tmp/dd.test\r\n\
time dd bs=1M count=5000 if=/tmp/dd.test of=/dev/null\r\n\
rm -f /tmp/dd.test\r\n\
</pre>\r\n\
</li>\r\n\
<li>\r\n\
Network\r\n\
<ul>\r\n\
<li>Server\r\n\
<pre class="code">\r\n\
nc -v -l 2222 > /dev/null\r\n\
</pre>\r\n\
</li>\r\n\
<li>Client\r\n\
<pre class="code">\r\n\
time dd if=/dev/zero bs=1M count=1000 | nc SERVER_HOST_NAME 2222 -v\r\n\
</pre>\r\n\
</li>\r\n\
</ul>\r\n\
</li>\r\n\
</ul>\r\n\
</div>
020_Sample_Output=<pre class="code">\n\
ubuntu@ip-10-228-95-32:~$ time echo "scale=5000; a(1)*4" | bc -l > /dev/null\n\
real	0m42.638s\n\
user	0m42.623s\n\
sys	0m0.012s\n\
\n\
ubuntu@ip-10-228-95-32:~$ time dd bs=1M count=5000 if=/dev/zero of=/tmp/dd.test\n\
5000+0 records in\n\
5000+0 records out\n\
5242880000 bytes (5.2 GB) copied, 92.0074 s, 57.0 MB/s\n\
real	1m32.013s\n\
user	0m0.004s\n\
sys	0m6.996s\n\
\n\
ubuntu@ip-10-228-95-32:~$ time dd bs=1M count=5000 if=/tmp/dd.test of=/dev/null\n\
5000+0 records in\n\
5000+0 records out\n\
5242880000 bytes (5.2 GB) copied, 2.79148 s, 1.9 GB/s\n\
real	0m2.797s\n\
user	0m0.188s\n\
sys	0m2.608s\n\
\n\
ubuntu@ip-10-228-95-32:~$ rm -f /tmp/dd.test\n\
\n\
ubuntu@ip-10-228-95-32:~$ time dd if=/dev/zero bs=1M count=1000 | nc 10.235.47.219 2222 -v\n\
Connection to 10.235.47.219 2222 port [tcp/*] succeeded\!\n\
1000+0 records in\n\
1000+0 records out\n\
1048576000 bytes (1.0 GB) copied, 113.536 s, 9.2 MB/s\n\
real	1m53.590s\n\
user	0m0.948s\n\
sys	0m7.176s\n\
\n\
ubuntu@ip-10-228-95-32:~$ nc -v -l 2222 > /dev/null\n\
Connection from 10.235.47.219 port 2222 [tcp/*] accepted\n\
</pre>
030_Results=<div>\n\
<script type="text/javascript" src="http://www.google.com/jsapi"></script>\n\
<script type="text/javascript">\n\
  google.load('visualization', '1', {packages: ['table']});\n\
    google.load("visualization", "1.0", {packages:["imagechart"]});\n\
</script>\n\
<script type="text/javascript">\n\
function drawVisualization() {\n\
  // Create and populate the data table.\n\
  var data = new google.visualization.DataTable(\n\
     {\n\
       cols: [{   label: 'Environment', type: 'string'},\n\
                { label: 'CPU [seconds]', type: 'number'},\n\
                { label: 'Disk Write [MB/s]', type: 'number'},\n\
                { label: 'Disk Read [MB/s]', type: 'number'},\n\
                { label: 'Network Write [MB/s]', type: 'number'}],\n\
       rows: [{c:[{v: 'EC2 m1.large'}, {v: 92},{v: 57},{v: 1946},{v: 9.2}]},\n\
              {c:[{v: 'EC2 t1.micro'}, {v: 106},{v: 37},{v: 105},{v: 9.2}]},\n\
              {c:[{v: 'Macbook Air [MBA] 1.8GHz i7'}, {v: 27},{v: 142},{v: 173},{v: 12.5}]},\n\
              {c:[{v: 'CentOS 5.7 virtual box inside MBA'}, {v:37},{v: 265},{v: 608},{v: 8.8}]}\n\
             ]\n\
     })\n\
     \n\
  new google.visualization.Table(document.getElementById('resultTable')).draw(data, null);\n\
                  \n\
  new google.visualization.ImageChart(document.getElementById('resultGraphCpu')).draw(new google.visualization.DataTable(\n\
     {\n\
       cols: [{  type: 'string'},\n\
                { type: 'number'}],\n\
       rows: [{c:[{v: 'm1.large'},{v: data.getValue(0,1)}]},\n\
              {c:[{v: 't1.micro'},{v: data.getValue(1,1)}]},\n\
              {c:[{v: 'MBA'}, {v: data.getValue(2,1)}]},\n\
              {c:[{v: 'CentOS'},{v: data.getValue(3,1)}]}\n\
             ]\n\
     }), {title:data.getColumnLabel(1), cht: 'bvs', chs: '300x200', colors:['\#4D89F9']});\n\
                  \n\
  new google.visualization.ImageChart(document.getElementById('resultGraphMem')).draw(new google.visualization.DataTable(\n\
     {\n\
       cols: [{   label: 'Environment', type: 'string'},\n\
                { label: 'Write', type: 'number'},\n\
                { label: 'Read', type: 'number'}],\n\
       rows: [{c:[{v: 'm1.large'},{v: 57},{v: 1946}]},\n\
              {c:[{v: 't1.micro'},{v: 37},{v: 105}]},\n\
              {c:[{v: 'MBA'}, {v: 142},{v: 173}]},\n\
              {c:[{v: 'CentOS'},{v: 265},{v: 608}]}\n\
             ]\n\
     }), {title:"Disk [MB/s]", cht: 'bvs', chs: '300x200', colors:['\#4D89F9','\#C6D9FD']});\n\
                  \n\
  new google.visualization.ImageChart(document.getElementById('resultGraphNetwork')).draw(new google.visualization.DataTable(\n\
     {\n\
       cols: [{  type: 'string'},\n\
                { type: 'number'}],\n\
       rows: [{c:[{v: 'm1.large'},{v: data.getValue(0,4)}]},\n\
              {c:[{v: 't1.micro'},{v: data.getValue(1,4)}]},\n\
              {c:[{v: 'MBA'}, {v: data.getValue(2,4)}]},\n\
              {c:[{v: 'CentOS'},{v: data.getValue(3,4)}]}\n\
             ]\n\
     }), {title:data.getColumnLabel(4), cht: 'bvs', chs: '300x200', colors:['\#4D89F9']});\n\
}\n\
\n\
\n\
google.setOnLoadCallback(drawVisualization);\n\
</script>\n\
<div id="resultTable"></div>\n\
<span id="resultGraphCpu"></span>\n\
<span id="resultGraphMem"></span>\n\
<span id="resultGraphNetwork"></span>\n\
</div>
_comment=true
_created=2012-02-01T22:25:47.164Z
_createdBy=superuser
_name=simple_linux_benchmark
_overview=We quite often get chance to work on new server, before you actual do any work, it's important to know how it perform compare with existing environment. The command used here are available on most of linux [verified on Ubuntu 11.10, CentOS 5.7] distribution by default.\n\
\n\
But bare in mind that <a href="http://en.wikipedia.org/wiki/Benchmark_(computing)">benchmark</a> only give you quick overview of the environment generic performance, it doesn't tell the performance of your application under work load. You should always run test against production like configuration to get repeatable performance number in a given environment.
_search=build-in,with,system,benchmark,commands,disk,cpu,,simple_linux_benchmark,linux,network,and
_title=Benchmark linux system cpu, disk and network with build-in commands
_type=web_page
